// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Status {
  ONGOING
  ENDED
}

enum JobStatus {
  PLACED
  UNPLACED
}


model User {
  id       String   @id @default(uuid())
  createdAt  DateTime   @default(now())
  email    String   @unique
  password String
  profile  Boolean @default(false)
  role     Role     @default(USER)
  jobstatus JobStatus @default(UNPLACED)
  resume   Resume?
  personalinfo  PersonalInfo?
  educationinfo EducationInfo?
  documents   Document?
  registeredDrives  UserDrive[]
  placedStudent   studentPlacement?
}

model Resume {
  id       String @id @default(uuid())
  resume   String
  userId   String @unique
  user     User  @relation(fields : [userId] ,references: [id])

}

model PersonalInfo {
  id      String @id @default(uuid())
  firstname   String
  lastname    String
  gender      String
  dob         DateTime
  contact     String
  email       String
  alternateEmail    String
  userId  String @unique
  user    User   @relation(fields: [userId] , references: [id])
}

model EducationInfo {
  id      String @id @default(uuid())
  rollno  String
  degree  String
  branch  String
  startyear   Int
  endyear     Int
  cgpa        Float
  percentage10       Float
  percentage12       Float
  userId  String @unique
  user    User   @relation(fields: [userId] , references: [id])
}

model Document {
  id       String @id @default(uuid())
  transcript   String
  marksheet10  String
  marksheet12  String
  userId   String @unique
  user     User  @relation(fields : [userId] ,references: [id])
}

model Company{
  id       String @id @default(uuid()) 
  createdAt  DateTime @default(now())
  name     String 
  address  String
  email    String @unique
  contact_person  String
  contact  String? @unique
  additionInfo String?
  drives       Drive[]
  PlacedStudents  studentPlacement[]
}

model Drive{
  id       String @id @default(uuid()) 
  createdAt   DateTime @default(now())
  cname     String 
  description   String
  job_description   String
  stipend     String
  eligibility   String
  deadline    DateTime
  status       Status @default(ONGOING)
  additionInfo String?
  companyId   String  
  company     Company  @relation(fields: [companyId], references: [id])
  registeredUser  UserDrive[]
  
}

model UserDrive {
  id               String   @id @default(uuid())
  userId           String
  driveId          String
  registrationTime DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  drive            Drive    @relation(fields: [driveId], references: [id])

  @@unique([userId, driveId])
}

model studentPlacement {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  userId           String   @unique
  companyId        String
  package          String
  role             String
  additionInfo     String
  user             User     @relation(fields: [userId], references: [id])
  company          Company    @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId]) 

}

